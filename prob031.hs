prob31 :: Int -> Int
prob31 0 = 1
prob31 n = sum $ map prob31 a
    where a = map (n-) $ filter (<=n) $  [1, 2, 5, 10, 20, 50, 100, 200]

--number of ways of making n from list
f :: Int -> [Int]
f n list =
    where tails = tails
          a = map (n-) $ filter (<=n) $  [1, 2, 5, 10, 20, 50, 100, 200]

{-
8
    (1+1+1+1+1+1+1) + 1     f 7
    (1+1+1+1+1+1) + 2       f 6
    (1+1+1+1+2) + 2
    (1+1+2+2) + 2
    (2+2+2) + 2
    (1+1+1) + 5             f 3
    (1+2) + 5

7
    (1+1+1+1+1+1) + 1   f 6
    (1+1+1+1+1) + 2     f 5
    (1+1+1+2) + 2
    (1+2+2) + 2
    (1+1) + 5           f 2
    (2) + 5

6
    (1+1+1+1+1) + 1     f 5
    (1+1+1+1) + 2       f 4
    (1+1+2) + 2
    (2+2) + 2
    (1) + 5             f 1

5
    (1+1+1+1) + 1   f 4
    (1+1+1) + 2     f 3
    (1+2) + 2
    5               f 0

4
    (1+1+1) + 1     f 3
    (1+1) + 2       f 2
    (2) + 2

3
    (1+1) + 1   f 2
    (1) + 2     f 1

2
    (1) + 1     f 1
    2           f 0

1
    1           f 0
-}
